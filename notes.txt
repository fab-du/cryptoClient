

# Angular directives 

directives are factories functions

*it should return an object ( options ) to tell $compile how the directive
 should behave when matched.

* The factory function is invoked only once when the compiler matches directive
  at the first time.

```
    angular
        .module('app')
        .directive('myDirective', function(){
            return {
                template: 'Name : {{ customer.name }} Address: {{ customer.address }}'
            };
        });
        
```


* Other options 
  * templateUrl
  * controller
  * restrict :
    * 'A' : only matches attribute name
    * 'E' : only matches element name
    * 'C' : only matches class name
    * can be combined as needed , for instance : 'AEC'
  * scope : are always good. separate the scope of the directive from the outer scope
  * link : function( scope, element, attrs ){} help to manipulate the dom
    * scope is an Angular scope object.
    * element is the jqLite-wrapped element that this directive matches.
    * attrs is a hash object with key-value pairs of normalized attribute names and their corresponding attribute values.


Sample with scope

```
angular.module('docsIsolateScopeDirective', [])
.controller('Controller', ['$scope', function($scope) {
  $scope.naomi = { name: 'Naomi', address: '1600 Amphitheatre' };
  $scope.igor = { name: 'Igor', address: '123 Somewhere' };
}])
.directive('myCustomer', function() {
  return {
    restrict: 'E',
    scope: {
      customerInfo: '=info'
    },
    templateUrl: 'my-customer-iso.html'
  };
});
```



```
Note: You do not currently have the ability to access scope variables from the templateUrl function, 
since the template is requested before the scope is initialized.

When should I use an attribute versus an element? 
Use an element when you are creating a component that is in control of the template. 
The common case for this is when you 
are creating a Domain-Specific Language for parts of your template. 
Use an attribute when you are decorating an existing element with new functionality.
```





